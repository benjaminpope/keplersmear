import numpy as np
import matplotlib.pyplot as plt

from time import time as clock

from argparse import ArgumentParser
from keplersmear.smear_tools import *
from smearcorrection import *

from matplotlib import rcParams
rcParams.update({'figure.autolayout': True})

import matplotlib as mpl 
mpl.style.use('seaborn-colorblind')

'''----------------------------------------------------
k2_smear_lc.py - generate a Kepler smear light curve
----------------------------------------------------'''

if __name__ == '__main__':
	ap = ArgumentParser()
	ap.add_argument('epic', type = str, help = 'star name to save')
	ap.add_argument('--campaign', type = str, default='C05',help = 'campaign')
	ap.add_argument('--cat-file', type = str, default='C05_smear.csv',help = 'campaign list')
	ap.add_argument('--smear-type', type = str, default = 'both', \
					help = 'which smear to use')
	ap.add_argument('--do-plot', action = 'store_true', default = False, \
					help = 'produce plots')
	ap.add_argument('--do-all', action = 'store_true', default = False, \
					help = 'produce plots')
	ap.add_argument('--do-pixels', action = 'store_true', default = False, \
					help = 'store pixel time series')
	ap.add_argument('--combine',action='store_true', default = False, \
					help='Try to optimally combine')
	ap.add_argument('--just-combine',action='store_true', default = False, \
					help='Do not recalculate, just combine')


	args = ap.parse_args()

	campaign = args.campaign
	epic = args.epic
	do_plot = args.do_plot 
	do_all = args.do_all
	cat_file = args.cat_file
	do_pixels = args.do_pixels
	combine = args.combine
	if args.just_combine:
		combine = True # override

	name = str(epic)
	out_dir = '%s_smear/' % campaign

	if do_all:
		tab = Table.read(cat_file)
		epics = list(tab['EPIC'][:])
	else:
		epics = [epic]

	print epics 

	starttime = clock()

	if args.smear_type == 'both':
		smear_types = ['vsmear_flux','smear_flux']
	else:
		smear_types = [args.smear_type]

	for epic in epics:	

		name = str(epic)
		if not args.just_combine:
			for smear_type in smear_types:
				try:
					lc = do_target_k2(name,campaign,cat_file=cat_file,out_dir=out_dir,
						smear_type=smear_type,do_plot=do_plot,do_pixels=do_pixels)

					lc.write('%s%s_%s_smear%s.fits' % (out_dir,campaign,epic,smear_name(smear_type)),
						overwrite=True)
					lc.write('%s%s_%s_smear%s.csv' % (out_dir,campaign,epic,smear_name(smear_type)))

					print '\nSaved to %s%s_%s_smear%s.csv' % (out_dir,campaign,epic,smear_name(smear_type))
					print '\nSaved to %s%s_%s_smear%s.fits too!' % (out_dir,campaign,epic,smear_name(smear_type))
				except:
					print '\nFailed on EPIC %s' % epic

		if combine:
			bestlc = combine_k2(out_dir,campaign,name,do_plot=do_plot)
			bestlc.write('%s%s_%s_smear_combined.csv' % (out_dir,campaign,name))
			bestlc.write('%s%s_%s_smear_combined.fits' % (out_dir,campaign,name),
				overwrite=True)


	print_time(clock()-starttime)